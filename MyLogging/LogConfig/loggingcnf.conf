#记录器：提供应用程序代码直接使用的接口
#设置记录器名称，root必须存在！！！
[loggers]
keys=root,applog

#处理器，将记录器产生的日志发送至目的地
#设置处理器类型
[handlers]
; keys=fileHandler,consoleHandler
keys=consoleHandler,logging_mul_process

#格式化器，设置日志内容的组成结构和消息字段
#设置格式化器的种类
[formatters]
keys=simpleFormatter

#设置记录器root的级别与种类
[logger_root]
level=DEBUG
handlers=consoleHandler

#设置记录器applog的级别与种类
[logger_applog]
level=DEBUG
#handlers=fileHandler
handlers=logging_mul_process
#起个对外的名字
qualname=policymanager
#继承关系
propagate=0

#设置
[handler_consoleHandler]
class=StreamHandler
args=(sys.stdout,)
level=DEBUG
formatter=simpleFormatter

; [handler_fileHandler]
; class=handlers.TimedRotatingFileHandler
; #class=handlers.logging_mul_process.SafeFileHandler
; #在午夜1点（3600s）开启下一个log文件 1：表示夜里12点生成一个新文件, 3600: 像后推迟1个小时; 第四个参数0表示保留历史文件: 0:表示保存历史件，30:表示保留一个月文件
; args=('/home/test/my_python/logs/policymanager.log','midnight',1,30)
; #class=handlers.RotatingFileHandler
; #循环日志文件, 以文件来分割: 每隔 1k划分一个日志文件, 备份文件为3
; #args=('/home/test/my_python/logs/policymanager.log','a',1024,3,'utf-8')
; level=DEBUG
; formatter=simpleFormatter


[handler_logging_mul_process]
class=logging_mul_process.TimeLoggerRolloverHandler
#class=handlers.logging_mul_process.SafeFileHandler
#在午夜1点（3600s）开启下一个log文件 1：表示夜里12点生成一个新文件, 3600: 像后推迟1个小时; 第四个参数0表示保留历史文件: 0:表示保存历史件，30:表示保留一个月文件
args=('/home/test/my_python/logs/policymanager.log','midnight',1,30)
#class=handlers.RotatingFileHandler
#循环日志文件, 以文件来分割: 每隔 1k划分一个日志文件, 备份文件为3
#args=('/home/test/my_python/logs/policymanager.log','a',1024,3,'utf-8')
level=DEBUG
formatter=simpleFormatter

[formatter_simpleFormatter]
format=%(asctime)s|%(name)s|%(filename)s[:%(lineno)d]|%(message)s
#设置时间输出格式
datefmt=%Y-%m-%d %H:%M:%S
